
/home/hamada/risc-v_git/riscv-tests_C/riscv-tests/work/rv32i_m/A/lrsc.elf:     ファイル形式 elf32-littleriscv


セクション .text.init の逆アセンブル:

00400000 <_start>:

#include "riscv_test.h"
#include "test_macros.h"

RVTEST_RV64U
RVTEST_CODE_BEGIN
  400000:	04c0006f          	j	40004c <reset_vector>

00400004 <trap_vector>:
  400004:	34202f73          	csrr	t5,mcause
  400008:	00800f93          	li	t6,8
  40000c:	03ff0a63          	beq	t5,t6,400040 <write_tohost>
  400010:	00900f93          	li	t6,9
  400014:	03ff0663          	beq	t5,t6,400040 <write_tohost>
  400018:	00b00f93          	li	t6,11
  40001c:	03ff0263          	beq	t5,t6,400040 <write_tohost>
  400020:	ffc00f17          	auipc	t5,0xffc00
  400024:	fe0f0f13          	addi	t5,t5,-32 # 0 <tohost-0x300000>
  400028:	000f0463          	beqz	t5,400030 <trap_vector+0x2c>
  40002c:	000f0067          	jr	t5
  400030:	34202f73          	csrr	t5,mcause
  400034:	000f5463          	bgez	t5,40003c <handle_exception>
  400038:	0040006f          	j	40003c <handle_exception>

0040003c <handle_exception>:
  40003c:	5391e193          	ori	gp,gp,1337

00400040 <write_tohost>:
  400040:	fff00f17          	auipc	t5,0xfff00
  400044:	fc3f2023          	sw	gp,-64(t5) # 300000 <tohost>
  400048:	ff9ff06f          	j	400040 <write_tohost>

0040004c <reset_vector>:
  40004c:	00000093          	li	ra,0
  400050:	00000113          	li	sp,0
  400054:	00000193          	li	gp,0
  400058:	00000213          	li	tp,0
  40005c:	00000293          	li	t0,0
  400060:	00000313          	li	t1,0
  400064:	00000393          	li	t2,0
  400068:	00000413          	li	s0,0
  40006c:	00000493          	li	s1,0
  400070:	00000513          	li	a0,0
  400074:	00000593          	li	a1,0
  400078:	00000613          	li	a2,0
  40007c:	00000693          	li	a3,0
  400080:	00000713          	li	a4,0
  400084:	00000793          	li	a5,0
  400088:	00000813          	li	a6,0
  40008c:	00000893          	li	a7,0
  400090:	00000913          	li	s2,0
  400094:	00000993          	li	s3,0
  400098:	00000a13          	li	s4,0
  40009c:	00000a93          	li	s5,0
  4000a0:	00000b13          	li	s6,0
  4000a4:	00000b93          	li	s7,0
  4000a8:	00000c13          	li	s8,0
  4000ac:	00000c93          	li	s9,0
  4000b0:	00000d13          	li	s10,0
  4000b4:	00000d93          	li	s11,0
  4000b8:	00000e13          	li	t3,0
  4000bc:	00000e93          	li	t4,0
  4000c0:	00000f13          	li	t5,0
  4000c4:	00000f93          	li	t6,0
  4000c8:	f1402573          	csrr	a0,mhartid
  4000cc:	00051063          	bnez	a0,4000cc <reset_vector+0x80>
  4000d0:	00000297          	auipc	t0,0x0
  4000d4:	01028293          	addi	t0,t0,16 # 4000e0 <reset_vector+0x94>
  4000d8:	30529073          	csrw	mtvec,t0
  4000dc:	18005073          	csrwi	satp,0
  4000e0:	00000297          	auipc	t0,0x0
  4000e4:	02028293          	addi	t0,t0,32 # 400100 <reset_vector+0xb4>
  4000e8:	30529073          	csrw	mtvec,t0
  4000ec:	800002b7          	lui	t0,0x80000
  4000f0:	fff28293          	addi	t0,t0,-1 # 7fffffff <_end+0x7fbff91f>
  4000f4:	3b029073          	csrw	pmpaddr0,t0
  4000f8:	01f00293          	li	t0,31
  4000fc:	3a029073          	csrw	pmpcfg0,t0
  400100:	30405073          	csrwi	mie,0
  400104:	00000297          	auipc	t0,0x0
  400108:	01428293          	addi	t0,t0,20 # 400118 <reset_vector+0xcc>
  40010c:	30529073          	csrw	mtvec,t0
  400110:	30205073          	csrwi	medeleg,0
  400114:	30305073          	csrwi	mideleg,0
  400118:	00000193          	li	gp,0
  40011c:	00000297          	auipc	t0,0x0
  400120:	ee828293          	addi	t0,t0,-280 # 400004 <trap_vector>
  400124:	30529073          	csrw	mtvec,t0
  400128:	00100513          	li	a0,1
  40012c:	01f51513          	slli	a0,a0,0x1f
  400130:	00054e63          	bltz	a0,40014c <reset_vector+0x100>
  400134:	0ff0000f          	fence
  400138:	00100193          	li	gp,1
  40013c:	05d00893          	li	a7,93
  400140:	00000513          	li	a0,0
  400144:	cda2d073          	csrwi	0xcda,5
  400148:	00000073          	ecall
  40014c:	ffc00297          	auipc	t0,0xffc00
  400150:	eb428293          	addi	t0,t0,-332 # 0 <tohost-0x300000>
  400154:	00028a63          	beqz	t0,400168 <reset_vector+0x11c>
  400158:	10529073          	csrw	stvec,t0
  40015c:	0000b2b7          	lui	t0,0xb
  400160:	10928293          	addi	t0,t0,265 # b109 <tohost-0x2f4ef7>
  400164:	30229073          	csrw	medeleg,t0
  400168:	30005073          	csrwi	mstatus,0
  40016c:	00000297          	auipc	t0,0x0
  400170:	01428293          	addi	t0,t0,20 # 400180 <reset_vector+0x134>
  400174:	34129073          	csrw	mepc,t0
  400178:	f1402573          	csrr	a0,mhartid
  40017c:	30200073          	mret

# get a unique core id
la a0, coreid
  400180:	00000517          	auipc	a0,0x0
  400184:	15050513          	addi	a0,a0,336 # 4002d0 <begin_signature>
li a1, 1
  400188:	00100593          	li	a1,1
amoadd.w a2, a1, (a0)
  40018c:	00b5262f          	amoadd.w	a2,a1,(a0)

# for now, only run this on core 0
1:li a3, 1
  400190:	00100693          	li	a3,1
bgeu a2, a3, 1b
  400194:	fed67ee3          	bgeu	a2,a3,400190 <reset_vector+0x144>

1: lw a1, (a0)
  400198:	00052583          	lw	a1,0(a0)
bltu a1, a3, 1b
  40019c:	fed5eee3          	bltu	a1,a3,400198 <reset_vector+0x14c>

004001a0 <test_2>:

# make sure that sc without a reservation fails.
TEST_CASE( 2, a4, 1, \
  4001a0:	00000517          	auipc	a0,0x0
  4001a4:	13850513          	addi	a0,a0,312 # 4002d8 <foo>
  4001a8:	deadc7b7          	lui	a5,0xdeadc
  4001ac:	eef78793          	addi	a5,a5,-273 # deadbeef <_end+0xde6db80f>
  4001b0:	18f5272f          	sc.w	a4,a5,(a0)
  4001b4:	00100393          	li	t2,1
  4001b8:	00200193          	li	gp,2
  4001bc:	0a771463          	bne	a4,t2,400264 <fail>

004001c0 <test_3>:
  li a5, 0xdeadbeef; \
  sc.w a4, a5, (a0); \
)

# make sure the failing sc did not commit into memory
TEST_CASE( 3, a4, 0, \
  4001c0:	00000717          	auipc	a4,0x0
  4001c4:	11872703          	lw	a4,280(a4) # 4002d8 <foo>
  4001c8:	00000393          	li	t2,0
  4001cc:	00300193          	li	gp,3
  4001d0:	08771a63          	bne	a4,t2,400264 <fail>
#)

#define LOG_ITERATIONS 10

# have each core add its coreid+1 to foo 1024 times
la a0, foo
  4001d4:	00000517          	auipc	a0,0x0
  4001d8:	10450513          	addi	a0,a0,260 # 4002d8 <foo>
li a1, 1<<LOG_ITERATIONS
  4001dc:	40000593          	li	a1,1024
addi a2, a2, 1
  4001e0:	00160613          	addi	a2,a2,1
1: lr.w a4, (a0)
  4001e4:	1005272f          	lr.w	a4,(a0)
add a4, a4, a2
  4001e8:	00c70733          	add	a4,a4,a2
sc.w a4, a4, (a0)
  4001ec:	18e5272f          	sc.w	a4,a4,(a0)
bnez a4, 1b
  4001f0:	fe071ae3          	bnez	a4,4001e4 <test_3+0x24>
add a1, a1, -1
  4001f4:	fff58593          	addi	a1,a1,-1
bnez a1, 1b
  4001f8:	fe0596e3          	bnez	a1,4001e4 <test_3+0x24>

# wait for all cores to finish
la a0, barrier
  4001fc:	00000517          	auipc	a0,0x0
  400200:	0d850513          	addi	a0,a0,216 # 4002d4 <barrier>
li a1, 1
  400204:	00100593          	li	a1,1
amoadd.w x0, a1, (a0)
  400208:	00b5202f          	amoadd.w	zero,a1,(a0)
1: lw a1, (a0)
  40020c:	00052583          	lw	a1,0(a0)
blt a1, a3, 1b
  400210:	fed5cee3          	blt	a1,a3,40020c <test_3+0x4c>
fence
  400214:	0ff0000f          	fence

00400218 <test_5>:

# expected result is 512*ncores*(ncores+1)
TEST_CASE( 5, a0, 0, \
  400218:	00000517          	auipc	a0,0x0
  40021c:	0c052503          	lw	a0,192(a0) # 4002d8 <foo>
  400220:	00969593          	slli	a1,a3,0x9
  400224:	40b50533          	sub	a0,a0,a1
  400228:	fff68693          	addi	a3,a3,-1
  40022c:	fe06dce3          	bgez	a3,400224 <test_5+0xc>
  400230:	00000393          	li	t2,0
  400234:	00500193          	li	gp,5
  400238:	02751663          	bne	a0,t2,400264 <fail>

0040023c <test_6>:
  addi a3, a3, -1; \
  bgez a3, 1b
)

# make sure that sc-after-successful-sc fails.
TEST_CASE( 6, a1, 1, \
  40023c:	00000517          	auipc	a0,0x0
  400240:	09c50513          	addi	a0,a0,156 # 4002d8 <foo>
  400244:	100525af          	lr.w	a1,(a0)
  400248:	180525af          	sc.w	a1,zero,(a0)
  40024c:	fe059ce3          	bnez	a1,400244 <test_6+0x8>
  400250:	180525af          	sc.w	a1,zero,(a0)
  400254:	00100393          	li	t2,1
  400258:	00600193          	li	gp,6
  40025c:	00759463          	bne	a1,t2,400264 <fail>
  sc.w a1, x0, (a0); \
  bnez a1, 1b; \
  sc.w a1, x0, (a0)
)

TEST_PASSFAIL
  400260:	02301463          	bne	zero,gp,400288 <pass>

00400264 <fail>:
  400264:	0ff0000f          	fence
  400268:	00018063          	beqz	gp,400268 <fail+0x4>
  40026c:	00119193          	slli	gp,gp,0x1
  400270:	0011e193          	ori	gp,gp,1
  400274:	05d00893          	li	a7,93
  400278:	00018513          	mv	a0,gp
  40027c:	cda4d073          	csrwi	0xcda,9
  400280:	cd90e073          	csrsi	0xcd9,1
  400284:	00000073          	ecall

00400288 <pass>:
  400288:	0ff0000f          	fence
  40028c:	00100193          	li	gp,1
  400290:	05d00893          	li	a7,93
  400294:	00000513          	li	a0,0
  400298:	cda2d073          	csrwi	0xcda,5
  40029c:	00000073          	ecall

RVTEST_CODE_END
  4002a0:	c0001073          	unimp
	...
